---
#- name: Gather Facts before provision EC2 Instances
#  import_tasks: gather_facts.yml

- name: Provision Bastion Instance
  ec2:
    region: "{{ ec2_region }}"
    ec2_access_key: "{{ ec2_access_key }}"
    ec2_secret_key: "{{ ec2_secret_key }}"
    keypair: "{{ ec2_keypair }}"
    group_id: "{{ sg_kubernetes_id }}"
    instance_type: "{{ ec2_instance_type }}"
    image: "{{ ec2_image_centos }}"
    instance_tags:
      Name: "{{ tag_name_kubernetes_bastion }}"
      Cluster: "{{ aws_cluster_name }}"
      Role: "bastion"
      kubespray-role: "bastion"
    count: 1
    wait: true
    vpc_subnet_id: "{{ public_subnet_id }}"
  register: ec2_bastion

- name: print ec2 bastion result
  debug:
    var: ec2_bastion

#- name: Add Bastion VM to hosts
#  add_host:
#    name: "{{ item.server.public_v4 }}"
#    groups: all
#    ansible_ssh_host: "{{ item.server.private_v4 }}"
#  with_items: "{{ ec2_bastion.results }}"

- name: Provision Kubernetes Master Instances
  ec2:
    region: "{{ ec2_region }}"
    ec2_access_key: "{{ ec2_access_key }}"
    ec2_secret_key: "{{ ec2_secret_key }}"
    keypair: "{{ ec2_keypair }}"
    group_id: "{{ sg_kubernetes_id }}"
    instance_type: "{{ ec2_instance_type }}"
    image: "{{ ec2_image_centos }}"
    instance_profile_name: "{{ ec2_instance_profile_name_kube_master }}"
    instance_tags:
      Name: "{{ tag_name_kubernetes_master }}-{{ item }}"
      Cluster: "{{ aws_cluster_name }}"
      Role: "master, etcd"
      kubernetes.io/cluster/mydevopscluster: "member"
      kubespray-role: "kube-master, kube-etcd"
    count: 1
    wait: true
    vpc_subnet_id: "{{ private_subnet_id }}"
  register: ec2_kubernetes_master
  with_items: "{{ instance_tags }}"

- ec2_instance_facts:
    region: "{{ ec2_region }}"
    ec2_access_key: "{{ ec2_access_key }}"
    ec2_secret_key: "{{ ec2_secret_key }}"
    filters:
      "tag:Role": "master, etcd"
      "instance-state-name": "running"
  register: ec2_master_instances

- name: debug ec2_master_instances
  debug:
    var: ec2_master_instances

- name: Set ec2_master_instances
  set_fact:
    kubernetes_master_ids: "{{ ec2_master_instances.instances|map(attribute='instance_id')|list }}"

- name: debug kubernetes_master_ids
  debug:
    var: kubernetes_master_ids

- action:
    module: ec2_elb_facts
    names: "{{ tag_name_kubernetes_elb }}"
    region: "{{ ec2_region }}"
    ec2_access_key: "{{ ec2_access_key }}"
    ec2_secret_key: "{{ ec2_secret_key }}"
  register: elb_facts

- name: print elb_facts
  debug:
    var: elb_facts

- name: Set elb_name
  set_fact:
    elb_name: "{{ elb_facts.elbs|map(attribute='name')|list }}"

- name: Instance Register
  ec2_elb:
    instance_id: "{{ item }}"
    ec2_elbs: "{{ elb_name }}"
    region: "{{ ec2_region }}"
    ec2_access_key: "{{ ec2_access_key }}"
    ec2_secret_key: "{{ ec2_secret_key }}"
    state: present
    wait: yes
  with_items: "{{ kubernetes_master_ids }}"
  ignore_errors: yes

- name: Provision Kubernetes Node Instances
  ec2:
    region: "{{ ec2_region }}"
    ec2_access_key: "{{ ec2_access_key }}"
    ec2_secret_key: "{{ ec2_secret_key }}"
    keypair: "{{ ec2_keypair }}"
    group_id: "{{ sg_kubernetes_id }}"
    instance_type: "{{ ec2_instance_type }}"
    image: "{{ ec2_image_centos }}"
    instance_profile_name: "{{ ec2_instance_profile_name_kube_node }}"
    instance_tags:
      Name: "{{ tag_name_kubernetes_node }}-{{ item }}"
      Cluster: "{{ aws_cluster_name }}"
      Role: "worker"
      kubernetes.io/cluster/mydevopscluster: "member"
      kubespray-role: "kube-node"
    count: 1
    wait: true
    vpc_subnet_id: "{{ private_subnet_id }}"
  register: ec2_kubernetes_node
  with_items: "{{ instance_tags }}"